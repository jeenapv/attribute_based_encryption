/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Db.Dbcon;
import General.Configuration;
import java.awt.Component;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.Writer;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.FileTime;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Random;

/**
 *
 * @author Jithinpv
 */
public class ChooseFile extends javax.swing.JFrame {

    public static String path;
    String selectedFilePath;
    String attr_1_file_name;
    String attr_2_file_size;
    String attr_3_file_extension;
    String attr_4_file_created_time;
    static double rangeMax = 999999999;
    static double rangeMin = 1111;
    static String secretKeyName = "";
    static String masterKeyName = "";
    static String privateKeyName = "";

    /**
     * Creates new form ChooseFile
     */
    public ChooseFile() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Choose File  :");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ENCRYPT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("File Encryption");

        jButton3.setText("BACK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptFile(File file) {
        try {

            FileInputStream dataInFile = new FileInputStream(file);
            byte fileData[] = new byte[(int) file.length()];
            dataInFile.read(fileData);
            dataInFile.close();

            int G = (int) generateCyclicRandomNumber();
            int G1 = (int) generateCyclicRandomNumber();
            int e = getAttributeCoefficient(attr_1_file_name);
            int g = getAttributeCoefficient(attr_2_file_size);
            int u = getAttributeCoefficient(attr_3_file_extension);
            int v = getAttributeCoefficient(attr_4_file_created_time);
            System.out.println(e);
            System.out.println(g);
            System.out.println(u);
            System.out.println(v);
            String privateKeyPath = "";
            String masterKeyPath = "";
            String secretKeyPath = "";
            int privateKey = generatePrivateKey(e, g, u, v);
            System.out.println("privateKey " + privateKey);
            int masterKey = generateMasterKey();
            System.out.println("masterKey " + masterKey);
            int secretKey = generateSecretKey(masterKey, privateKey);

            String fileDataString = encodeData(fileData);
            System.out.println(fileDataString);

            Writer out = new BufferedWriter(new FileWriter(file));
            out.write(fileDataString);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static int generateSecretKey(int a, int b) {
        int c = a - b;
        if (c < 0) {
            c = c * -1;
        }
        try {
            File secretKeyFile = new File(Configuration.allKeys + "secret_" + System.currentTimeMillis() + ".key");
            secretKeyName = secretKeyFile.getName();
            Writer out = new BufferedWriter(new FileWriter(secretKeyFile));
            out.write(c + "");
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return c;
    }

    private static int generateMasterKey() {
        int masterKey = 1;
        Random r = new Random();
        masterKey = r.nextInt();

        if (masterKey < 0) {
            masterKey = masterKey * -1;
        }
        try {
            File masterKeyFile = new File(Configuration.allKeys + "master_" + System.currentTimeMillis() + ".key");
            masterKeyName = masterKeyFile.getName();
            Writer out = new BufferedWriter(new FileWriter(masterKeyFile));
            out.write(masterKey + "");
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return masterKey;
    }

    private static int generatePrivateKey(int e, int g, int u, int v) {
        int privateKey = ((e + g) * u) / v;
        File privateKeyFile = new File(Configuration.allKeys + "private_" + System.currentTimeMillis() + ".key");
        privateKeyName = privateKeyFile.getName();
        try {
            Writer out = new BufferedWriter(new FileWriter(privateKeyFile));
            out.write(privateKey + "");
            out.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return privateKey;
    }

    private static double generateCyclicRandomNumber() {
        Random r = new Random();
        double randomValue = rangeMin + (rangeMax - rangeMin) * r.nextDouble();
        return randomValue;
    }

    private static int getAttributeCoefficient(String attribute) {
        int attributeCoefficient = 0;
        for (int i = 0; i < attribute.length(); i++) {
            char character = attribute.charAt(0);
            int coefficient = (int) character;
            attributeCoefficient += coefficient;
        }

        return attributeCoefficient;
    }

    public static String encodeData(byte[] imagebytearray) {
        return Base64.encode(imagebytearray);
    }

    public static byte[] decodeData(String idatastring) {
        return Base64.decode(idatastring);
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String filename = jLabel2.getText();
        if (filename.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Choose file");
        } else {
            // selectedFilePath
            encryptFile(new File(Configuration.dataCloud + selectedFilePath));
            Dbcon dbcon = new Dbcon();
            int ins = dbcon.insert("insert into tbl_file_encryption_logs(encrypted_file_path,data_member_id,attr_1 ,attr_2,attr_3,attr_4,created_at,master_key,secret_key,private_key)values('" + selectedFilePath + "','" + DataMemberLogin.logged_in_user_id + "','" + attr_1_file_name + "','" + attr_2_file_size + "','" + attr_3_file_extension + "','" + attr_4_file_created_time + "','" + System.currentTimeMillis() + "', '" + masterKeyName + "' , '" + secretKeyName + "' , '" + privateKeyName + "' )");
            if (ins > 0) {
                this.dispose();
                UploadFile uploadFile = new UploadFile(attr_1_file_name, attr_2_file_size, attr_3_file_extension, attr_4_file_created_time, privateKeyName, masterKeyName, secretKeyName);
                uploadFile.setVisible(true);
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        DataMemberHome dataMemberHome = new DataMemberHome();
        dataMemberHome.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog((Component) evt.getSource());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            try {
                path = file.toString();
                System.out.println(path);
                String name = chooser.getSelectedFile().getName();
                jLabel2.setText(name);

                Path filePath = Paths.get(file.getPath());
                BasicFileAttributes bfa = Files.readAttributes(filePath, BasicFileAttributes.class);

                attr_1_file_name = FilenameUtils.getBaseName(file.getName());
                attr_2_file_size = (file.length()) + "";
                attr_3_file_extension = FilenameUtils.getExtension(file.getPath());
                attr_4_file_created_time = bfa.creationTime().toMillis() + "";

                selectedFilePath = System.currentTimeMillis() + "." + FilenameUtils.getExtension(path);
                FileUtils.copyFile(file, new File(Configuration.dataCloud + selectedFilePath));

            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ChooseFile().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
